"""Stand-alone utility functions and classes for the Toron project.

This sub-module contains data handling functions, exception classes,
and warning classes.

NOTE: Ideally, this module should not import any other modules from
within Toron itself--it should only import packages from the Python
Standard Library. That said, Toron's compatibility modules (like
`_typing`) are treated as if they are part of the Standard Library
and can be imported.
"""

from itertools import chain
from ._typing import (
    Iterable,
    Mapping,
    Optional,
    Sequence,
    Union,
)


class ToronError(Exception):
    """Error in Toron usage or invocation."""


class ToronWarning(UserWarning):
    """Base class for warnings generated by Toron."""


def _data_to_dict_rows(
    data: Union[Iterable[Mapping], Iterable[Sequence]],
    columns: Optional[Sequence[str]] = None,
) -> Iterable[Mapping]:
    """Normalize data as an iterator of dictionary rows."""
    iter_data = iter(data)
    first_element = next(iter_data)
    if isinstance(first_element, Sequence):
        if not columns:
            columns = first_element
        else:
            iter_data = chain([first_element], iter_data)
        dict_rows = (dict(zip(columns, row)) for row in iter_data)
    elif isinstance(first_element, Mapping):
        dict_rows = chain([first_element], iter_data)  # type: ignore [assignment]
    else:
        msg = (f'data must contain mappings or sequences, '
               f'got type {type(first_element)}')
        raise TypeError(msg)
    return dict_rows

